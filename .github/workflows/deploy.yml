name: Blue-Green Deployment to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: poc-1-aima-pmu
  SERVICE_NAME: aima-web
  REGION: us-west1
  SERVICE_ACCOUNT: github-actions@poc-1-aima-pmu.iam.gserviceaccount.com

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure Docker authentication
      run: gcloud auth configure-docker gcr.io

    - name: Generate version and revision suffix
      id: versioning
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        REVISION_SUFFIX="rc-${TIMESTAMP}"
        
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "REVISION_SUFFIX=$REVISION_SUFFIX" >> $GITHUB_ENV

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.TIMESTAMP }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Deploy New Revision
      run: |
        # Get current serving revision
        CURRENT_REVISION=$(gcloud run revisions list \
          --service=${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --filter="traffic_percent>0" \
          --format="value(metadata.name)" \
          --limit=1)

        # Check current deployment state
        CURRENT_STATE=$(gcloud run revisions describe $CURRENT_REVISION \
          --region=${{ env.REGION }} \
          --format="value(labels.state)" || echo "active")

        # Determine new state (if current is active, deploy passive, and vice versa)
        NEW_STATE=$([ "$CURRENT_STATE" = "active" ] && echo "passive" || echo "active")
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.TIMESTAMP }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --service-account ${{ env.SERVICE_ACCOUNT }} \
          --min-instances 1 \
          --memory 512Mi \
          --revision-suffix=${{ env.REVISION_SUFFIX }} \
          --labels=state=$NEW_STATE \
          --no-traffic \
          --timeout 300 \
          --execution-environment gen2 \
          --cpu=1 \
          --set-env-vars STARTUP_CPU_BOOST=true

        # Ensure traffic stays with current revision during testing
        if [ -n "$CURRENT_REVISION" ]; then
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-revisions=$CURRENT_REVISION=100
        fi

        echo "NEW_STATE=$NEW_STATE" >> $GITHUB_ENV
        echo "CURRENT_REVISION=$CURRENT_REVISION" >> $GITHUB_ENV

    - name: Health Check New Revision
      id: test
      run: |
        MAX_RETRIES=5
        RETRY_DELAY=20
        TIMEOUT=300
        
        NEW_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(status.url)")
        
        echo "Testing URL: $NEW_URL"
        
        start_time=$(date +%s)
        retry_count=0
        
        while true; do
          current_time=$(date +%s)
          elapsed=$((current_time - start_time))
          
          if [ $elapsed -gt $TIMEOUT ]; then
            echo "Health check timed out after ${TIMEOUT}s"
            echo "status=failure" >> $GITHUB_ENV
            exit 1
          fi
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$NEW_URL")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Health check passed"
            echo "status=success" >> $GITHUB_ENV
            break
          fi
          
          retry_count=$((retry_count + 1))
          if [ $retry_count -ge $MAX_RETRIES ]; then
            echo "Max retries ($MAX_RETRIES) exceeded"
            echo "status=failure" >> $GITHUB_ENV
            exit 1
          fi
          
          echo "Attempt $retry_count failed with status $HTTP_STATUS. Retrying in ${RETRY_DELAY}s..."
          sleep $RETRY_DELAY
        done

    - name: Verify Deployment
      if: env.status == 'success'
      run: |
        NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"
        
        # Get detailed revision status
        echo "Getting detailed revision status..."
        REVISION_STATUS=$(gcloud run revisions describe $NEW_REVISION \
          --region=${{ env.REGION }} \
          --format="yaml")
        
        echo "Full revision status:"
        echo "$REVISION_STATUS"
        
        # Check ready condition
        READY_STATUS=$(echo "$REVISION_STATUS" | yq '.status.conditions[] | select(.type=="Ready") | .status')
        READY_MESSAGE=$(echo "$REVISION_STATUS" | yq '.status.conditions[] | select(.type=="Ready") | .message')
        
        if [ "$READY_STATUS" != "True" ]; then
          echo "New revision is not ready."
          echo "Status message: $READY_MESSAGE"
          echo "Full conditions:"
          echo "$REVISION_STATUS" | yq '.status.conditions'
          exit 1
        fi
        
        # Check container health
        CONTAINER_STATUS=$(echo "$REVISION_STATUS" | yq '.status.conditions[] | select(.type=="ContainerHealthy") | .status')
        CONTAINER_MESSAGE=$(echo "$REVISION_STATUS" | yq '.status.conditions[] | select(.type=="ContainerHealthy") | .message')
        
        if [ "$CONTAINER_STATUS" != "True" ]; then
          echo "Container is not healthy."
          echo "Status message: $CONTAINER_MESSAGE"
          exit 1
        fi

    - name: Monitor Initial Performance
      if: env.status == 'success'
      run: |
        NEW_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(status.url)")
        
        echo "Monitoring initial performance..."
        for i in {1..5}; do
          RESPONSE_TIME=$(curl -s -w "%{time_total}\n" -o /dev/null $NEW_URL)
          echo "Request $i response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "Warning: High response time detected"
          fi
        done

    - name: Migrate traffic to new revision
      if: env.status == 'success'
      run: |
        NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"
        
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=$NEW_REVISION=100

    - name: Cleanup old revisions (keep last 5)
      if: always()
      run: |
        set -e
        REVISIONS=$(gcloud run revisions list \
          --service ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(metadata.name)' \
          --sort-by=~metadata.creationTimestamp --limit=1000)

        COUNT=0
        for REVISION in $REVISIONS; do
          COUNT=$((COUNT + 1))
          if [ $COUNT -gt 5 ]; then
            gcloud run revisions delete $REVISION \
              --region=${{ env.REGION }} \
              --quiet || true
          fi
        done

    - name: Rollback on Failure
      if: failure()
      run: |
        CURRENT_REVISION=$(gcloud run revisions list \
          --service=${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --filter="traffic_percent>0" \
          --format="value(metadata.name)" \
          --limit=1)

        if [ -n "$CURRENT_REVISION" ]; then
          echo "Rolling back to: $CURRENT_REVISION"
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-revisions=$CURRENT_REVISION=100
        fi

    - name: Send Deployment Notification
      if: always()
      run: |
        NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"
        DEPLOY_TIME=$(date +"%Y-%m-%d %H:%M:%S %Z")
        STATUS="SUCCEEDED"
        STATUS_EMOJI="‚úÖ"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS="FAILED"
          STATUS_EMOJI="‚ùå"
        fi
        
        # Collect deployment metrics
        METRICS=$(gcloud run revisions describe $NEW_REVISION \
          --region=${{ env.REGION }} \
          --format="yaml(status)")
        
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        
        # Create detailed message with metrics
        MESSAGE=$(cat << EOF
        ${STATUS_EMOJI} [*Production*] *Deployment ${STATUS}*
        üöÄ *Service:* ${{ env.SERVICE_NAME }}
        üì¶ *Revision:* ${NEW_REVISION}
        üåé *Region:* ${{ env.REGION }}
        üïí *Deploy Time:* ${DEPLOY_TIME}
        üí¨ *Commit:* ${COMMIT_MSG}

        *Deployment Metrics:*
        \`\`\`
        ${METRICS}
        \`\`\`
        EOF
        )
        
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"text\": \"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        else
          echo "Slack webhook URL not configured. Printing deployment report to console:"
          echo "$MESSAGE"
        fi

    - name: Clean up cache
      if: always()
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
