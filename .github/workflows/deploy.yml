name: Blue-Green Deployment to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: poc-1-aima-pmu
  SERVICE_NAME: aima-web
  REGION: us-west1
  SERVICE_ACCOUNT: github-actions@poc-1-aima-pmu.iam.gserviceaccount.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
        project_id: ${{ env.PROJECT_ID }}
        create_credentials_file: true
        export_environment_variables: true

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure Docker authentication
      run: gcloud auth configure-docker gcr.io

    # Generate a unique tag for this deployment
    - name: Generate version tag
      id: tag
      run: echo "TAG=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

    # Build and push with unique tag
    - name: Build and push Docker image
      env:
        IMAGE_NAME: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.TAG }}
      run: |
        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME

    # Deploy new revision
    - name: Deploy new revision
      id: deploy
      run: |
        # Generate unique suffix for new revision
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        CANDIDATE_SUFFIX="rc-${TIMESTAMP}"
        
        # Deploy new revision (candidate) with unique name
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.TAG }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --service-account ${{ env.SERVICE_ACCOUNT }} \
          --min-instances 1 \
          --memory 1Gi \
          --cpu 1 \
          --revision-suffix $CANDIDATE_SUFFIX \
          --labels=deployment=candidate,version=${{ env.TAG }} \
          --timeout=300 \
          --cpu-boost \
          --set-env-vars=NODE_ENV=production,HOSTNAME=0.0.0.0 \
          --no-traffic

    # Test new revision
    - name: Test new revision
      id: test
      run: |
        # Wait for the new revision to be ready
        sleep 30

        # Get the latest revision URL
        NEW_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(status.url)")

        echo "Testing URL: $NEW_URL"

        # Test with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        SUCCESS=false

        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$NEW_URL")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            SUCCESS=true
            echo "status=success" >> $GITHUB_ENV
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Attempt $RETRY_COUNT failed with status $HTTP_STATUS"
            [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep 10
          fi
        done

        if [ "$SUCCESS" = false ]; then
          echo "status=failure" >> $GITHUB_ENV
          exit 1
        fi

    # Migrate traffic if tests pass
    - name: Migrate traffic
      if: env.status == 'success'
      run: |
        # Get the candidate revision
        CANDIDATE_REVISION=$(gcloud run revisions list \
          --service=${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --filter="metadata.labels.deployment=candidate" \
          --format="value(metadata.name)" \
          --sort-by=~metadata.creationTimestamp \
          --limit=1)

        if [ -n "$CANDIDATE_REVISION" ]; then
          echo "Migrating traffic to revision: $CANDIDATE_REVISION"
          # Update traffic to candidate revision
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-revisions="${CANDIDATE_REVISION}=100"
        else
          echo "No candidate revision found, traffic migration failed"
          exit 1
        fi

    # Cleanup old revisions (keep last 5)
    - name: Cleanup old revisions
      if: always()
      run: |
        set -e
        REVISIONS=$(gcloud run revisions list \
          --service ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(metadata.name)' \
          --sort-by=~metadata.creationTimestamp --limit=1000)

        COUNT=0
        for REVISION in $REVISIONS; do
          COUNT=$((COUNT + 1))
          if [ $COUNT -gt 5 ]; then
            gcloud run revisions delete $REVISION \
              --region=${{ env.REGION }} \
              --quiet || true
          fi
        done

    # Rollback on failure
    - name: Rollback on failure
      if: failure()
      run: |
        set -e
        # Get the current serving revision
        CURRENT_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(status.traffic[0].revisionName)")

        # Label it as stable only when we need to rollback
        gcloud run services update ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --revision-suffix stable-$(date +%Y%m%d-%H%M%S) \
          --labels=deployment=stable,status=serving

        # Update traffic to this stable revision
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=$CURRENT_REVISION=100
